function sum = neuralGuess(weights, input)
	sum = 0;
	for i = 1:length(weights)
		sum += weights(i)*input(i);
	endfor
	return
endfunction

amount = input("Insert amout of bits to test\n")
weights = [];

for i = 1:amount+1
	weights = [weights, unifrnd(-1,1)*0.1];
endfor


learningRate = input("Insert learning rate\n")
tries = 0;
correct = 0;

source("chooseAlgorithm")
source("setUpPatternMatrix")
patternMatrix = setUpPatternMatrix(amount, @validate);

while(true)
	randInt = randi(2 ** amount);
	input = patternMatrix(randInt, 1 : amount + 1)
	expected = patternMatrix(randInt, amount + 1)
	guess = transfer(sum(times(weights, input)))

	deltaW = learningRate * (expected - guess) * correction(guess) * input;
	weights += deltaW

	tries += 1;
	if(guess == expected) 
		correct += 1;
	endif
	ratio = correct/tries;
	printf("Ratio is %f\n", ratio)
	printf("Missed: %d\n",(tries - correct))
	pause(0.05)

endwhile